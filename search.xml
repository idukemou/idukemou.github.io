<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode刷题</title>
      <link href="/2021/08/09/leetcode%E5%88%B7%E9%A2%98/"/>
      <url>/2021/08/09/leetcode%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博文，通过JavaScript完成leetcode有代表性的算法题…</p></blockquote><span id="more"></span><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.两数之和</span></span><br><span class="line"><span class="comment"> * 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target</span></span><br><span class="line"><span class="comment"> * 的那两个整数，并返回它们的数组下标。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>{</span><br><span class="line">    <span class="comment">// 创建Map，Map 对象保存键值对，并且能够记住键的原始插入顺序。任何值(对象或者原始值) </span></span><br><span class="line">    <span class="comment">// 都可以作为一个键或一个值。</span></span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">const</span> complement = target - nums[i]</span><br><span class="line">        <span class="keyword">if</span> (map.has(complement)) {</span><br><span class="line">            <span class="keyword">return</span> [map.get(complement), i]</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            map.set(nums[i], i)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">2</span>, <span class="number">17</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line"><span class="built_in">console</span>.log(twoSum(nums, target))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2.两数相加</span></span><br><span class="line"><span class="comment"> * 给出两个非空的链表用来表示两个非负整数。其中，它们给自的位数是按照逆序的方式存储的，并且</span></span><br><span class="line"><span class="comment"> * 它们的每个节点只能存储一位数字，如果，我们将这两个数相加起来，则会返回一个新的链表来表示</span></span><br><span class="line"><span class="comment"> * 它们的和。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val, next</span>) </span>{</span><br><span class="line">    <span class="built_in">this</span>.val = (val === <span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="built_in">this</span>.next = (next === <span class="literal">undefined</span> ? <span class="literal">null</span> : next)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode()</span><br><span class="line">    <span class="keyword">let</span> curr = dummy</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(l1 !== <span class="literal">null</span> || l2 !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) {</span><br><span class="line">            sum += l1.val</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) {</span><br><span class="line">            sum += l2.val</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        }</span><br><span class="line">        sum += carry</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>)</span><br><span class="line">        carry = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>)</span><br><span class="line">        curr = curr.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) {</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3.无重复字符的最长子串</span></span><br><span class="line"><span class="comment"> * 给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</span></span><br><span class="line"><span class="comment"> * 解题方法：sliding window，滑动窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="comment">// 创建一个set</span></span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>, maxLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (i; i &lt; s.length; i++) {</span><br><span class="line">        <span class="comment">// 如果集合不包含当前下标的元素</span></span><br><span class="line">        <span class="keyword">if</span> (!set.has(s[i])) {</span><br><span class="line">            set.add(s[i])</span><br><span class="line">            maxLength = <span class="built_in">Math</span>.max(maxLength, set.size)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">while</span>(set.has(s[i])) {</span><br><span class="line">                set.delete(s[j])</span><br><span class="line">                j++</span><br><span class="line">            }</span><br><span class="line">            set.add(s[i])</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4.最长回文子字符串</span></span><br><span class="line"><span class="comment"> * 给你一个字符串 s，找到 s 中最长的回文子串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (s.length &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 助手函数，判断左边是否越界，右边是否越界，左边的字符是否等于右边的字符</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">expandAroundCenter</span>(<span class="params">left, right</span>) </span>{</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length &amp;&amp; s[left] === s[right]) {</span><br><span class="line">            <span class="keyword">if</span> (right - left + <span class="number">1</span> &gt; maxLength) {</span><br><span class="line">                maxLength = right - left + <span class="number">1</span></span><br><span class="line">                start = left</span><br><span class="line">            }</span><br><span class="line">            left--</span><br><span class="line">            right++</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) {</span><br><span class="line">        expandAroundCenter(i - <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">        expandAroundCenter(i, i + <span class="number">1</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLength)</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 15.三数之和</span></span><br><span class="line"><span class="comment"> * 给你一个包含 n 个整数的数组&nbsp;nums，判断&nbsp;nums&nbsp;中是否存在三个元素 a，b，c ，使得&nbsp;</span></span><br><span class="line"><span class="comment"> * a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</span></span><br><span class="line"><span class="comment"> * 注意：答案中不可以包含重复的三元组。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="comment">// 给数组排序</span></span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span> || nums[i] !== nums[i - <span class="number">1</span>]) {</span><br><span class="line">            <span class="keyword">let</span> start = i + <span class="number">1</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(start &lt; end) {</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[start] + nums[end] === <span class="number">0</span>) {</span><br><span class="line">                    result.push([nums[i], nums[start], nums[end]])</span><br><span class="line">                    start++</span><br><span class="line">                    end--</span><br><span class="line">                    <span class="keyword">while</span>(start &lt; end &amp;&amp; nums[start] === nums[start - <span class="number">1</span>]) {</span><br><span class="line">                        start++</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">while</span>(start &lt; end &amp;&amp; nums[end] === nums[end + <span class="number">1</span>]) {</span><br><span class="line">                        end--</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[start] + nums[end] &lt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// 让当前两数的和更大</span></span><br><span class="line">                    start++</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 让当前两数的和变小</span></span><br><span class="line">                    end--</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 19.删除链表的倒数第N个节点</span></span><br><span class="line"><span class="comment"> * 给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</span></span><br><span class="line"><span class="comment"> * 进阶：你能尝试使用一趟扫描实现吗？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>{</span><br><span class="line">    <span class="comment">// 双指针完成，快慢指针，n1，n2，n2挪n个节点，接下来n1和n2一个一个后移，n2将指向空的</span></span><br><span class="line">    <span class="comment">// 时候，n1指向目标要被删除的节点的前一个节点</span></span><br><span class="line">    <span class="comment">// 通过dummy节点处理边界问题</span></span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode()</span><br><span class="line">    dummy.next = head</span><br><span class="line">    <span class="keyword">let</span> n1 = dummy</span><br><span class="line">    <span class="keyword">let</span> n2 = dummy</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= n; i++) {</span><br><span class="line">        n2 = n2.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(n2 !== <span class="literal">null</span>) {</span><br><span class="line">        n1 = n1.next</span><br><span class="line">        n2 = n2.next</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 删除目标节点</span></span><br><span class="line">    n1.next = n1.next.next</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 20.有效的括号</span></span><br><span class="line"><span class="comment"> * 给定一个只包括 '('，')'，'{'，'}'，'['，']'&nbsp;的字符串 s ，判断字符串是否有效。</span></span><br><span class="line"><span class="comment"> * 有效字符串需满足：</span></span><br><span class="line"><span class="comment"> *      左括号必须用相同类型的右括号闭合。</span></span><br><span class="line"><span class="comment"> *      左括号必须以正确的顺序闭合。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> mappings = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    mappings.set(<span class="string">'('</span>, <span class="string">')'</span>)</span><br><span class="line">    mappings.set(<span class="string">'['</span>, <span class="string">']'</span>)</span><br><span class="line">    mappings.set(<span class="string">'{'</span>, <span class="string">'}'</span>)</span><br><span class="line">    <span class="comment">//通过栈判定匹配情况</span></span><br><span class="line">    <span class="keyword">const</span> stack = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; s.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (mappings.has(s[i])) {</span><br><span class="line">            stack.push(mappings.get(s[i]))</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span>(stack.pop() !== s[i]) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> stack.length === <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 21.合并两个有序链表</span></span><br><span class="line"><span class="comment"> * 将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点</span></span><br><span class="line"><span class="comment"> * 组成的。 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> curr = <span class="keyword">new</span> ListNode()</span><br><span class="line">    <span class="comment">// dummy是用来保存结果链表的头部的,链表的头部是dummy.next</span></span><br><span class="line">    <span class="keyword">let</span> dummy = curr</span><br><span class="line">    <span class="keyword">while</span>(l1 !== <span class="literal">null</span> &amp;&amp; l2 !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val) {</span><br><span class="line">            curr.next = l1</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            curr.next = l2</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 结果链表的指针curr向后移动一位</span></span><br><span class="line">        curr = curr.next</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 循环结束后单独判定两个目标链表是否为空，目的是解决不等长情况</span></span><br><span class="line">    <span class="keyword">if</span> (l1 !== <span class="literal">null</span>) {</span><br><span class="line">        curr.next = l1</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (l2 !== <span class="literal">null</span>) {</span><br><span class="line">        curr.next = l2</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 24.两两交换链表中的节点</span></span><br><span class="line"><span class="comment"> * 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</span></span><br><span class="line"><span class="comment"> * 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode()</span><br><span class="line">    dummy.next = head</span><br><span class="line">    <span class="keyword">let</span> current = dummy</span><br><span class="line">    <span class="keyword">while</span>(current.next !== <span class="literal">null</span> &amp;&amp; current.next.next !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">let</span> n1 = current.next</span><br><span class="line">        <span class="keyword">let</span> n2 = current.next.next</span><br><span class="line">        current.next = n2</span><br><span class="line">        n1.next = n2.next</span><br><span class="line">        n2.next = n1</span><br><span class="line">        current = n1</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 49.字母异位词分组</span></span><br><span class="line"><span class="comment"> * 给定一个字符串数组，将字母异位词组合在一起。可以按任意顺序返回结果列表。</span></span><br><span class="line"><span class="comment"> * 字母异位词指字母相同，但排列不同的字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>{</span><br><span class="line">    <span class="comment">// 最优解法，统计</span></span><br><span class="line">    <span class="comment">// 通过建立一个长度为26的数组，起始值为0.表示字母出现的次数</span></span><br><span class="line">    <span class="keyword">if</span> (strs.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// map记录异位词组合</span></span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> str <span class="keyword">of</span> strs) {</span><br><span class="line">        <span class="built_in">console</span>.log(str)</span><br><span class="line">        <span class="comment">// 创建长度为26的数组填充0</span></span><br><span class="line">        <span class="keyword">const</span> characters = <span class="built_in">Array</span>(<span class="number">26</span>).fill(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 通过字母的ascii码映射数组的下表，a-97</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) {</span><br><span class="line">            <span class="comment">// 获取指定下标的字符的ascii码，并减去97映射到数组下标</span></span><br><span class="line">            <span class="keyword">const</span> ascii = str.charCodeAt(i) - <span class="number">97</span></span><br><span class="line">            characters[ascii]++</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">console</span>.log(characters)</span><br><span class="line">        <span class="keyword">const</span> key = characters.join(<span class="string">'-'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(key)</span><br><span class="line">        <span class="keyword">if</span>(map.has(key)) {</span><br><span class="line">            <span class="comment">// map.set(key, map.get(key).push(str))</span></span><br><span class="line">            map.set(key, [...map.get(key), str])</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            map.set(key, [str])</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> array <span class="keyword">of</span> map) {</span><br><span class="line">        result.push(array[<span class="number">1</span>])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">let</span> strs = [<span class="string">"bdddddddddd"</span>,<span class="string">"bbbbbbbbbbc"</span>]</span><br><span class="line"><span class="built_in">console</span>.log(groupAnagrams(strs))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 53.最大子序和</span></span><br><span class="line"><span class="comment"> * 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其</span></span><br><span class="line"><span class="comment"> * 最大和。</span></span><br><span class="line"><span class="comment"> * 动态规划思想</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> memo = []</span><br><span class="line">    memo[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">        memo[i] = <span class="built_in">Math</span>.max(nums[i] + memo[i - <span class="number">1</span>], nums[i])</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max, memo[i])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 54.螺旋矩阵</span></span><br><span class="line"><span class="comment"> * 给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (matrix.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> top = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> bottom = matrix.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right = matrix[<span class="number">0</span>].length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> direction = <span class="string">'right'</span></span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right &amp;&amp; top &lt;= bottom) {</span><br><span class="line">        <span class="keyword">if</span> (direction === <span class="string">'right'</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) {</span><br><span class="line">                result.push(matrix[top][i])</span><br><span class="line">            }</span><br><span class="line">            top++</span><br><span class="line">            direction = <span class="string">'down'</span></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (direction === <span class="string">'down'</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt;= bottom; i++) {</span><br><span class="line">                result.push(matrix[i][right])</span><br><span class="line">            }</span><br><span class="line">            right--</span><br><span class="line">            direction = <span class="string">'left'</span></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (direction === <span class="string">'left'</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = right; i &gt;= left; i--) {</span><br><span class="line">                result.push(matrix[bottom][i])</span><br><span class="line">            }</span><br><span class="line">            bottom--</span><br><span class="line">            direction = <span class="string">'top'</span></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (direction === <span class="string">'top'</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = bottom; i &gt;= top; i--) {</span><br><span class="line">                result.push(matrix[i][left])</span><br><span class="line">            }</span><br><span class="line">            left++</span><br><span class="line">            direction = <span class="string">'right'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 55.跳跃游戏</span></span><br><span class="line"><span class="comment"> * 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。</span></span><br><span class="line"><span class="comment"> * 数组中的每个元素代表你在该位置可以跳跃的最大长度。</span></span><br><span class="line"><span class="comment"> * 判断你是否能够到达最后一个下标。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    top-down方式</span></span><br><span class="line"><span class="comment">    // 动态规划思想</span></span><br><span class="line"><span class="comment">    const totalLength = nums.length</span></span><br><span class="line"><span class="comment">    const memo = Array(totalLength).fill(0)</span></span><br><span class="line"><span class="comment">    // dp思想</span></span><br><span class="line"><span class="comment">    memo[totalLength - 1] = 1</span></span><br><span class="line"><span class="comment">    function jump(position) {</span></span><br><span class="line"><span class="comment">        if (memo[position] === 1) {</span></span><br><span class="line"><span class="comment">            return true</span></span><br><span class="line"><span class="comment">        } else if (memo[position] === -1) {</span></span><br><span class="line"><span class="comment">            return false</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">        // 防止数组越界</span></span><br><span class="line"><span class="comment">        const maxJump = Math.min(position + nums[position], totalLength - 1)</span></span><br><span class="line"><span class="comment">        for (let i = position + 1; i &lt;= maxJump; i++) {</span></span><br><span class="line"><span class="comment">            const jumpResult = jump(i)</span></span><br><span class="line"><span class="comment">            if (jumpResult === true) {</span></span><br><span class="line"><span class="comment">                memo[position] = 1</span></span><br><span class="line"><span class="comment">                return true</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">        memo[position] = -1</span></span><br><span class="line"><span class="comment">        return false</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    return jump(0)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// bottom-up方式</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    const totalLength = nums.length</span></span><br><span class="line"><span class="comment">    const memo = Array(totalLength).fill(0)</span></span><br><span class="line"><span class="comment">    // dp</span></span><br><span class="line"><span class="comment">    memo[totalLength - 1] = 1</span></span><br><span class="line"><span class="comment">    for (let i = totalLength - 2; i &gt;= 0; i--) {</span></span><br><span class="line"><span class="comment">        const maxJump = Math.min(i + nums[i], totalLength - 1)</span></span><br><span class="line"><span class="comment">        for (let j = i + 1; j &lt;= maxJump; j++) {</span></span><br><span class="line"><span class="comment">            if (memo[j] === 1) {</span></span><br><span class="line"><span class="comment">                memo[i] = 1</span></span><br><span class="line"><span class="comment">                break</span></span><br><span class="line"><span class="comment">            }</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    if (memo[0] === 1) {</span></span><br><span class="line"><span class="comment">        return true</span></span><br><span class="line"><span class="comment">    } else {</span></span><br><span class="line"><span class="comment">        return false</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">// 贪心算法</span></span><br><span class="line">    <span class="keyword">let</span> maxJump = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="keyword">if</span> (i + nums[i] &gt;= maxJump) {</span><br><span class="line">            maxJump = i</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxJump === <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 56.合并区间</span></span><br><span class="line"><span class="comment"> * 以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi]。</span></span><br><span class="line"><span class="comment"> * 请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (intervals.length &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> intervals</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 先排序，保证区间是升序</span></span><br><span class="line">    intervals.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">// 用临时数组记录当前最大区间</span></span><br><span class="line">    <span class="keyword">let</span> curr = intervals[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> interval <span class="keyword">of</span> intervals) {</span><br><span class="line">        <span class="keyword">if</span> (curr[<span class="number">1</span>] &gt;= interval[<span class="number">0</span>]) {</span><br><span class="line">            <span class="comment">// 取终止位置的最大值</span></span><br><span class="line">            curr[<span class="number">1</span>] = <span class="built_in">Math</span>.max(curr[<span class="number">1</span>], interval[<span class="number">1</span>])</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            result.push(curr)</span><br><span class="line">            curr= interval</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 最后一个要判断并保存</span></span><br><span class="line">    <span class="keyword">if</span> (curr.length != <span class="number">0</span>) {</span><br><span class="line">        result.push(curr)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 62.不同路径，经典动态规划题</span></span><br><span class="line"><span class="comment"> * 一个机器人位于一个 m x n&nbsp;网格的左上角 （起始点在下图中标记为 “Start” ）。</span></span><br><span class="line"><span class="comment"> * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）</span></span><br><span class="line"><span class="comment"> * 问总共有多少条不同的路径？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> memo = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        memo.push([])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; n; row++) {</span><br><span class="line">        memo[row][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; m; col++) {</span><br><span class="line">        memo[<span class="number">0</span>][col] = <span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">1</span>; row &lt; n; row++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">1</span>; col &lt; m; col++) {</span><br><span class="line">            memo[row][col] = memo[row - <span class="number">1</span>][col] + memo[row][col - <span class="number">1</span>]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> memo[n - <span class="number">1</span>][m - <span class="number">1</span>]</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 66.加一</span></span><br><span class="line"><span class="comment"> * 给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</span></span><br><span class="line"><span class="comment"> * 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</span></span><br><span class="line"><span class="comment"> * 你可以假设除了整数 0 之外，这个整数不会以零开头。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = digits.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="keyword">if</span> (digits[i] !== <span class="number">9</span>) {</span><br><span class="line">            digits[i]++</span><br><span class="line">            <span class="keyword">return</span> digits</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            digits[i] = <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> result = [<span class="number">1</span>, ...digits]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 70.爬楼梯</span></span><br><span class="line"><span class="comment"> * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span></span><br><span class="line"><span class="comment"> * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span></span><br><span class="line"><span class="comment"> * 注意：给定 n 是一个正整数。</span></span><br><span class="line"><span class="comment"> * 动态规划题目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> memo = []</span><br><span class="line">    memo[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    memo[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">        memo[i] = memo[i - <span class="number">2</span>] + memo[i - <span class="number">1</span>]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 73.矩阵置零</span></span><br><span class="line"><span class="comment"> * 给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用</span></span><br><span class="line"><span class="comment"> * 原地算法。</span></span><br><span class="line"><span class="comment"> * 进阶：</span></span><br><span class="line"><span class="comment"> * 一个直观的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。</span></span><br><span class="line"><span class="comment"> * 一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。</span></span><br><span class="line"><span class="comment"> * 你能想出一个仅使用常量空间的解决方案吗？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> setZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>{</span><br><span class="line">    <span class="comment">// 用矩阵的第一行和第一列标零的情况</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.检查并标记第一行和第一列是否有0，</span></span><br><span class="line"><span class="comment">     * 2.使用第一行和第一列，来标记其余行列是否含0</span></span><br><span class="line"><span class="comment">     * 3.接下来，利用第一行和第一列的标0情况，将matrix中的数字标0</span></span><br><span class="line"><span class="comment">     * 4.最后，处理第一行和第一列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> firstColHasZero = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> firstRowHasZero = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 检查第一列是否有零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] === <span class="number">0</span>) {</span><br><span class="line">            firstColHasZero = <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 检查第一行是否有0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix[<span class="number">0</span>].length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (matrix[<span class="number">0</span>][i] === <span class="number">0</span>) {</span><br><span class="line">            firstRowHasZero = <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 使用第一行和第一列，来标记其余行列是否含有0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">1</span>; row &lt; matrix.length; row++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">1</span>; col &lt; matrix[<span class="number">0</span>].length; col++) {</span><br><span class="line">            <span class="keyword">if</span> (matrix[row][col] === <span class="number">0</span>) {</span><br><span class="line">                matrix[row][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                matrix[<span class="number">0</span>][col] = <span class="number">0</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 接下来，利用第一行和第一列的标零情况，将matrix中的数字标零</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">1</span>; row &lt; matrix.length; row++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">1</span>; col &lt; matrix[<span class="number">0</span>].length; col++) {</span><br><span class="line">            <span class="keyword">if</span> (matrix[row][<span class="number">0</span>] === <span class="number">0</span> || matrix[<span class="number">0</span>][col] === <span class="number">0</span>) {</span><br><span class="line">                matrix[row][col] = <span class="number">0</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 最后处理第一行和第一列</span></span><br><span class="line">    <span class="keyword">if</span> (firstColHasZero) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) {</span><br><span class="line">            matrix[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (firstRowHasZero) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix[<span class="number">0</span>].length; i++) {</span><br><span class="line">            matrix[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 83.删除排序链表中的重复元素</span></span><br><span class="line"><span class="comment"> * 存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除所有重复的元素，使每个元素</span></span><br><span class="line"><span class="comment"> * 只出现一次 。</span></span><br><span class="line"><span class="comment"> * 返回同样按升序排列的结果链表。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>{</span><br><span class="line">     <span class="keyword">let</span> current = head</span><br><span class="line">     <span class="keyword">while</span>(current !== <span class="literal">null</span> &amp;&amp; current.next !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (current.val === current.next.val) {</span><br><span class="line">            current.next = current.next.next</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            current = current.next</span><br><span class="line">        }</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> head</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 92.反转链表二</span></span><br><span class="line"><span class="comment"> * 给你单链表的头指针 head 和两个整数&nbsp;left 和 right ，其中&nbsp;left &lt;= right 。请你反转从</span></span><br><span class="line"><span class="comment"> * 位置 left 到位置 right 的链表节点，返回 反转后的链表 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseBetween = <span class="function"><span class="keyword">function</span>(<span class="params">head, m, n</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> curr = head</span><br><span class="line">    <span class="comment">// 快进到指定位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) {</span><br><span class="line">        prev = curr</span><br><span class="line">        curr = curr.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> prev2 = prev</span><br><span class="line">    <span class="keyword">let</span> curr2 = curr</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = m; i &lt;= n; i++) {</span><br><span class="line">       [curr.next, prev, curr] = [prev, curr, curr.next]</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 考虑从头部开始反转的情况</span></span><br><span class="line">    <span class="keyword">if</span> (prev2 !== <span class="literal">null</span>) {</span><br><span class="line">        prev2.next = prev</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        head = prev</span><br><span class="line">    }</span><br><span class="line">    curr2.next = curr</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 121.买卖股票的最佳时机</span></span><br><span class="line"><span class="comment"> * 给定一个数组 prices ，它的第&nbsp;i 个元素&nbsp;prices[i] 表示一支给定股票第 i 天的价格。</span></span><br><span class="line"><span class="comment"> * 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法</span></span><br><span class="line"><span class="comment"> * 来计算你所能获取的最大利润。</span></span><br><span class="line"><span class="comment"> * 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (prices.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 暂存左半边的最小值，存储当前最大利润</span></span><br><span class="line">    <span class="keyword">let</span> minPrice = prices[<span class="number">0</span>], maxProfit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; minPrice) {</span><br><span class="line">            minPrice = prices[i]</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] - minPrice &gt; maxProfit) {</span><br><span class="line">            maxProfit = prices[i] - minPrice</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxProfit</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 122.买卖股票的最佳时机2</span></span><br><span class="line"><span class="comment"> * 给定一个数组 prices ，其中&nbsp;prices[i] 是一支给定股票第 i 天的价格。</span></span><br><span class="line"><span class="comment"> * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</span></span><br><span class="line"><span class="comment"> * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit2 = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (prices.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// // 最大利润</span></span><br><span class="line">    <span class="comment">// let profit = 0</span></span><br><span class="line">    <span class="comment">// // 最低点</span></span><br><span class="line">    <span class="comment">// let valley = prices[0]</span></span><br><span class="line">    <span class="comment">// // 最高点</span></span><br><span class="line">    <span class="comment">// let peak = prices[0]</span></span><br><span class="line">    <span class="comment">// let i = 0</span></span><br><span class="line">    <span class="comment">// while( i &lt; prices.length - 1) {</span></span><br><span class="line">    <span class="comment">//     while(i &lt; prices.length - 1 &amp;&amp; prices[i] &gt;= prices[i + 1]) {</span></span><br><span class="line">    <span class="comment">//         i++</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">//     valley = prices[i]</span></span><br><span class="line">    <span class="comment">//     while(i &lt; prices.length - 1 &amp;&amp; prices[i] &lt;= prices[i + 1]) {</span></span><br><span class="line">    <span class="comment">//         i++</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">//     peak = prices[i]</span></span><br><span class="line">    <span class="comment">//     profit += peak - valley</span></span><br><span class="line">    <span class="comment">//     return profit</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// 贪心算法</span></span><br><span class="line">    <span class="keyword">let</span> profit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.length - <span class="number">1</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &lt; prices[i + <span class="number">1</span>]) {</span><br><span class="line">            profit += prices[i + <span class="number">1</span>] - prices[i]</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> profit</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 123.买卖股票的最佳时机3</span></span><br><span class="line"><span class="comment"> * 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</span></span><br><span class="line"><span class="comment"> * 设计一个算法来计算你所能获取的最大利润。你最多可以完成&nbsp;两笔&nbsp;交易。</span></span><br><span class="line"><span class="comment"> * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</span></span><br><span class="line"><span class="comment"> * 动态规划题目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit3 = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (prices.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 定义一个二维数组</span></span><br><span class="line">    <span class="keyword">const</span> dp = <span class="built_in">Array</span>.from(<span class="built_in">Array</span>(<span class="number">3</span>), <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(prices.length))</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; prices.length; i++) {</span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++) {</span><br><span class="line">        <span class="keyword">let</span> maxProfit = -prices[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; prices.length; j++) {</span><br><span class="line">            dp[i][j] = <span class="built_in">Math</span>.max(dp[i][j - <span class="number">1</span>], prices[j] + maxProfit)</span><br><span class="line">            maxProfit = <span class="built_in">Math</span>.max(maxProfit, dp[i - <span class="number">1</span>][j] - prices[j])</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">2</span>][prices.length - <span class="number">1</span>]</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 125.验证回文串</span></span><br><span class="line"><span class="comment"> * 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</span></span><br><span class="line"><span class="comment"> * 说明：本题中，我们将空字符串定义为有效的回文串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 双指针，从两头往中间缩</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>{</span><br><span class="line">    s = s.toLowerCase().replace(<span class="regexp">/[\W_]/g</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> (s.length &lt; <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = s.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) {</span><br><span class="line">        <span class="keyword">if</span> (s[left] !== s[right]) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 134.加油站</span></span><br><span class="line"><span class="comment"> * 在一条环路上有&nbsp;N&nbsp;个加油站，其中第&nbsp;i&nbsp;个加油站有汽油&nbsp;gas[i]&nbsp;升。</span></span><br><span class="line"><span class="comment"> * 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1&nbsp;个加油站需要消耗汽油&nbsp;cost[i]&nbsp;升。</span></span><br><span class="line"><span class="comment"> * 你从其中的一个加油站出发，开始时油箱为空。</span></span><br><span class="line"><span class="comment"> * 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</span></span><br><span class="line"><span class="comment"> * 说明:&nbsp;</span></span><br><span class="line"><span class="comment"> * 如果题目有解，该答案即为唯一答案。</span></span><br><span class="line"><span class="comment"> * 输入数组均为非空数组，且长度相同。</span></span><br><span class="line"><span class="comment"> * 输入数组中的元素均为非负数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canCompleteCircuit = <span class="function"><span class="keyword">function</span>(<span class="params">gas, cost</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> totalGas = <span class="number">0</span>, totalCost = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; gas.length; i++) {</span><br><span class="line">        totalGas += gas[i]</span><br><span class="line">        totalCost += cost[i]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (totalGas &lt; totalCost) {</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> currentGas = <span class="number">0</span>, start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; gas.length; i++) {</span><br><span class="line">        currentGas = currentGas - cost[i] + gas[i]</span><br><span class="line">        <span class="keyword">if</span> (currentGas &lt; <span class="number">0</span>) {</span><br><span class="line">            currentGas = <span class="number">0</span></span><br><span class="line">            start = i + <span class="number">1</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 141.环形链表</span></span><br><span class="line"><span class="comment"> * 给定一个链表，判断链表中是否有环。</span></span><br><span class="line"><span class="comment"> * 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表</span></span><br><span class="line"><span class="comment"> * 中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，</span></span><br><span class="line"><span class="comment"> * 则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</span></span><br><span class="line"><span class="comment"> * 如果链表中存在环，则返回 true 。 否则，返回 false 。</span></span><br><span class="line"><span class="comment"> * 进阶：</span></span><br><span class="line"><span class="comment"> * 你能用 O(1)（即，常量）内存解决此问题吗？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="comment">// 使用快慢指针，互相追赶来确定是否有环</span></span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">let</span> fast = head</span><br><span class="line">    <span class="keyword">while</span>(fast.next !== <span class="literal">null</span> &amp;&amp; fast.next.next !== <span class="literal">null</span>) {</span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        <span class="keyword">if</span> (slow === fast) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 142.环形链表2</span></span><br><span class="line"><span class="comment"> * 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</span></span><br><span class="line"><span class="comment"> * 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。</span></span><br><span class="line"><span class="comment"> * 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递</span></span><br><span class="line"><span class="comment"> * 到函数中。</span></span><br><span class="line"><span class="comment"> * 说明：不允许修改给定的链表。</span></span><br><span class="line"><span class="comment"> * 进阶：</span></span><br><span class="line"><span class="comment"> * 你是否可以使用 O(1) 空间解决此题？</span></span><br><span class="line"><span class="comment"> * 弗洛伊德算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> slow = head, fast = head, isCycle = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">while</span> (fast.next !== <span class="literal">null</span> &amp;&amp; fast.next.next !== <span class="literal">null</span>) {</span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast =fast.next.next</span><br><span class="line">        <span class="keyword">if</span> (slow === fast) {</span><br><span class="line">            isCycle = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!isCycle) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 快指针回到头部</span></span><br><span class="line">    fast = head</span><br><span class="line">    <span class="keyword">while</span> (slow !== fast) {</span><br><span class="line">        slow = slow.next</span><br><span class="line">        fast = fast.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> slow    </span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 153.乘积最大子序列</span></span><br><span class="line"><span class="comment"> * 给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），</span></span><br><span class="line"><span class="comment"> * 并返回该子数组所对应的乘积。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProduct = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> maxProductMemo = []</span><br><span class="line">    <span class="keyword">const</span> minProductMemo = []</span><br><span class="line">    maxProductMemo[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    minProductMemo[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> max = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">        maxProductMemo[i] = <span class="built_in">Math</span>.max(nums[i], nums[i] * maxProductMemo[i - <span class="number">1</span>], nums[i] * minProductMemo[i - <span class="number">1</span>])</span><br><span class="line">        minProductMemo[i] = <span class="built_in">Math</span>.min(nums[i], nums[i] * maxProductMemo[i - <span class="number">1</span>], nums[i] * minProductMemo[i - <span class="number">1</span>])</span><br><span class="line">        max = <span class="built_in">Math</span>.max(max, maxProductMemo[i])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 153.寻找旋转排序数组中的最小值</span></span><br><span class="line"><span class="comment"> * 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，</span></span><br><span class="line"><span class="comment"> * 原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：</span></span><br><span class="line"><span class="comment"> * 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]</span></span><br><span class="line"><span class="comment"> * 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]</span></span><br><span class="line"><span class="comment"> * 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], </span></span><br><span class="line"><span class="comment"> * a[1], a[2], ..., a[n-2]] 。</span></span><br><span class="line"><span class="comment"> * 给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次</span></span><br><span class="line"><span class="comment"> * 旋转。请你找出并返回数组中的 最小元素。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="comment">// 二分搜索</span></span><br><span class="line">    <span class="keyword">if</span>(nums.length === <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (nums[right] &gt; nums[<span class="number">0</span>]) {</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(left + (right - left) / <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[mid + <span class="number">1</span>]) {</span><br><span class="line">            <span class="keyword">return</span> nums[mid + <span class="number">1</span>]</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (nums[mid - <span class="number">1</span>] &gt; nums[mid]) {</span><br><span class="line">            <span class="keyword">return</span> nums[mid]</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 二分</span></span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; nums[left]) {</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 160.相交链表</span></span><br><span class="line"><span class="comment"> * 编写一个程序，找出两个单链表相交的起始节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>{</span><br><span class="line">    <span class="comment">// 考虑两个链表长度不同，可以让两个链表的指针各自走完自身链表后继续走一遍对方的链表，</span></span><br><span class="line">    <span class="comment">// 这样可以保证两个指针最终走过的总路程相同</span></span><br><span class="line">    <span class="keyword">let</span> n1 = headA, n2 = headB</span><br><span class="line">    <span class="keyword">while</span> (n1 !== n2) {</span><br><span class="line">        <span class="keyword">if</span> (n1 === <span class="literal">null</span>) {</span><br><span class="line">            n1 = headB</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            n1 = n1.next</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n2 === <span class="literal">null</span>) {</span><br><span class="line">            n2 = headA</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            n2 = n2.next</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> n1</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 187.重复的DNA序列</span></span><br><span class="line"><span class="comment"> * 所有 DNA 都由一系列缩写为 'A'，'C'，'G' 和 'T' 的核苷酸组成，例如："ACGAATTCCG"。</span></span><br><span class="line"><span class="comment"> * 在研究 DNA 时，识别 DNA 中的重复序列有时会对研究非常有帮助。</span></span><br><span class="line"><span class="comment"> * 编写一个函数来找出所有目标子串，目标子串的长度为 10，且在 DNA 字符串 s 中出现次数超过一次。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRepeatedDnaSequences = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    const map = new Map()</span></span><br><span class="line"><span class="comment">    const result = []</span></span><br><span class="line"><span class="comment">    for (let i = 0; i + 10 &lt;= s.length; i++) {</span></span><br><span class="line"><span class="comment">        const dna = s.substring(i, i + 10)</span></span><br><span class="line"><span class="comment">        console.log(map)</span></span><br><span class="line"><span class="comment">        if (map.get(dna) === undefined) {</span></span><br><span class="line"><span class="comment">            map.set(dna, 1)</span></span><br><span class="line"><span class="comment">        } else if (map.get(dna) === 1) {</span></span><br><span class="line"><span class="comment">            map.set(dna, 2)</span></span><br><span class="line"><span class="comment">            result.push(dna)</span></span><br><span class="line"><span class="comment">        } else {</span></span><br><span class="line"><span class="comment">            map.set(dna, map.get(dna) + 1)</span></span><br><span class="line"><span class="comment">        }</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    return result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(), result = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i + <span class="number">10</span> &lt;= s.length; i++) {</span><br><span class="line">       <span class="keyword">const</span> dna = s.substring(i, i + <span class="number">10</span>)</span><br><span class="line">       <span class="keyword">if</span> (set.has(dna)) {</span><br><span class="line">           result.add(dna)</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">           set.add(dna)</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Array</span>.from(result)</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(findRepeatedDnaSequences(<span class="string">"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"</span>))</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 198.打家劫舍</span></span><br><span class="line"><span class="comment"> * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素</span></span><br><span class="line"><span class="comment"> * 就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</span></span><br><span class="line"><span class="comment"> * 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够</span></span><br><span class="line"><span class="comment"> * 偷窃到的最高金额。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="keyword">var</span> rob = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="comment">// 边界条件的判断</span></span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// const memo = []</span></span><br><span class="line">    <span class="comment">// memo[0] = nums[0]</span></span><br><span class="line">    <span class="comment">// memo[1] = Math.max(nums[0], nums[1])</span></span><br><span class="line">    <span class="comment">// for (let i = 2; i &lt;= nums.length; i++) {</span></span><br><span class="line">    <span class="comment">//     memo[i] = Math.max(nums[i] + memo[i - 2], memo[i - 1])</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// return memo[nums.length - 1]</span></span><br><span class="line">    <span class="comment">// 空间复杂度上的优化</span></span><br><span class="line">    <span class="comment">// 不需要数组，变成两个变量</span></span><br><span class="line">    <span class="keyword">let</span> prev2 = nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> prev1 = <span class="built_in">Math</span>.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="built_in">Math</span>.max(nums[i] + prev2, prev1)</span><br><span class="line">        prev2 = prev1</span><br><span class="line">        prev1 = temp</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> prev1</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 200.岛屿数量</span></span><br><span class="line"><span class="comment"> * 给你一个由&nbsp;'1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。</span></span><br><span class="line"><span class="comment"> * 岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</span></span><br><span class="line"><span class="comment"> * 此外，你可以假设该网格的四条边均被水包围。</span></span><br><span class="line"><span class="comment"> * 沉没思想，从当前点向四周扩散</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">row, col</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= grid.length || col &lt; <span class="number">0</span> || col &gt;= grid[<span class="number">0</span>].length || grid[row][col] === <span class="string">'0'</span>) {</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        grid[row][col] = <span class="string">'0'</span></span><br><span class="line">        dfs(row - <span class="number">1</span>, col)</span><br><span class="line">        dfs(row + <span class="number">1</span>, col)</span><br><span class="line">        dfs(row, col - <span class="number">1</span>)</span><br><span class="line">        dfs(row, col + <span class="number">1</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; grid.length; row++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; grid[<span class="number">0</span>].length; col++) {</span><br><span class="line">            <span class="keyword">if</span> (grid[row][col] === <span class="string">'1'</span>) {</span><br><span class="line">                count++</span><br><span class="line">                <span class="comment">// 沉没当前岛</span></span><br><span class="line">                <span class="comment">// bfs-广度优先搜索，dfs深度优先搜索，沉没用的是dfs</span></span><br><span class="line">                dfs(row, col)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 206.反转链表</span></span><br><span class="line"><span class="comment"> * 给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="comment">// 不考虑空间复杂度的化可以使用stack完成</span></span><br><span class="line">    <span class="comment">// 优化方法</span></span><br><span class="line">    <span class="keyword">let</span> prev = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> curr = head</span><br><span class="line">    <span class="keyword">let</span> next = head</span><br><span class="line">    <span class="keyword">while</span>(curr !== <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// next = curr.next</span></span><br><span class="line">        <span class="comment">// curr.next = prev</span></span><br><span class="line">        <span class="comment">// prev = curr</span></span><br><span class="line">        <span class="comment">// curr = next</span></span><br><span class="line">        <span class="comment">// es6解构赋值</span></span><br><span class="line">        [next, curr.next, prev, curr] = [curr.next, prev, curr, next]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 217.存在重复元素</span></span><br><span class="line"><span class="comment"> * 给定一个整数数组，判断是否存在重复元素。</span></span><br><span class="line"><span class="comment"> * 如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="comment">// let map = new Map()</span></span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; nums.length; i++) {</span></span><br><span class="line">    <span class="comment">//     let count = map.get(nums[i])</span></span><br><span class="line">    <span class="comment">//     if (count === undefined) {</span></span><br><span class="line">    <span class="comment">//         map.set(nums[i], 1)</span></span><br><span class="line">    <span class="comment">//     } else if (count === 1) {</span></span><br><span class="line">    <span class="comment">//         return true</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// return false</span></span><br><span class="line">    <span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (set.has(nums[i])) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">        set.add(nums[i])</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 219.存在重复元素2</span></span><br><span class="line"><span class="comment"> * 给定一个整数数组和一个整数&nbsp;k，判断数组中是否存在两个不同的索引&nbsp;i&nbsp;和&nbsp;j，使得&nbsp;nums [i]</span></span><br><span class="line"><span class="comment"> *  = nums [j]，并且 i 和 j&nbsp;的差的 绝对值 至多为 k。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsNearbyDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>{</span><br><span class="line"><span class="comment">//     let i = 0</span></span><br><span class="line"><span class="comment">//     let j = nums.length - 1</span></span><br><span class="line"><span class="comment">//     while (i != j) {</span></span><br><span class="line"><span class="comment">//         if (nums[i] === nums[j] &amp;&amp; Math.abs(i - j) &lt;= k) {</span></span><br><span class="line"><span class="comment">//             return true</span></span><br><span class="line"><span class="comment">//         }</span></span><br><span class="line"><span class="comment">//         i++</span></span><br><span class="line"><span class="comment">//         j--</span></span><br><span class="line"><span class="comment">//     }</span></span><br><span class="line"><span class="comment">//     return false</span></span><br><span class="line"><span class="comment">// 暴力解法</span></span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; nums.length - 1; i++) {</span></span><br><span class="line">    <span class="comment">//     for (let j = i + 1; j &lt; nums.length; j++) {</span></span><br><span class="line">    <span class="comment">//         if (nums[i] === nums[j] &amp;&amp; Math.abs(i - j) &lt;= k) {</span></span><br><span class="line">    <span class="comment">//             return true</span></span><br><span class="line">    <span class="comment">//         }</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// return false</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (map.has(nums[i]) &amp;&amp; <span class="built_in">Math</span>.abs(i - map.get(nums[i])) &lt;= k) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            map.set(nums[i], i)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 238.除自身以外的数组的乘积</span></span><br><span class="line"><span class="comment"> * 给你一个长度为&nbsp;n&nbsp;的整数数组&nbsp;nums，其中&nbsp;n &gt; 1，返回输出数组&nbsp;output&nbsp;，其中 output[i]&nbsp;</span></span><br><span class="line"><span class="comment"> * 等于&nbsp;nums&nbsp;中除&nbsp;nums[i]&nbsp;之外其余各元素的乘积。</span></span><br><span class="line"><span class="comment"> * 说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。</span></span><br><span class="line"><span class="comment"> * 你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为</span></span><br><span class="line"><span class="comment"> * 额外空间。）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> output = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 从左往右扫描</span></span><br><span class="line">    <span class="keyword">let</span> product = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        output[i] = output[i] * product</span><br><span class="line">        product = product * nums[i]</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 从右往左扫描</span></span><br><span class="line">    product = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        output[i] = output[i] * product</span><br><span class="line">        product = product * nums[i]</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 242.有效地字母异位词</span></span><br><span class="line"><span class="comment"> * 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</span></span><br><span class="line"><span class="comment"> * 注意：若&nbsp;s 和 t&nbsp;中每个字符出现的次数都相同，则称&nbsp;s 和 t&nbsp;互为字母异位词。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (s.length !== t.length) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (map.has(s[i])) {</span><br><span class="line">            map.set(s[i], map.get(s[i]) + <span class="number">1</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            map.set(s[i], <span class="number">1</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (map.has(t[i])) {</span><br><span class="line">            map.set(t[i], map.get(t[i]) - <span class="number">1</span>)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            map.set(t[i], -<span class="number">1</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> letter <span class="keyword">of</span> map) {</span><br><span class="line">        <span class="keyword">if</span> (letter[<span class="number">1</span>] !== <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 283.移动零</span></span><br><span class="line"><span class="comment"> * 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeros = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (nums.length === <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) {</span><br><span class="line">            nums[j] = nums[i]</span><br><span class="line">            j++</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = j; i &lt; nums.length; i++) {</span><br><span class="line">        nums[i] = <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 328.奇偶链表</span></span><br><span class="line"><span class="comment"> * 给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点</span></span><br><span class="line"><span class="comment"> * 指的是节点编号的奇偶性，而不是节点的值的奇偶性。</span></span><br><span class="line"><span class="comment"> * 请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes</span></span><br><span class="line"><span class="comment"> * 为节点总数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> oddEvenList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (head.next === <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> odd = head</span><br><span class="line">    <span class="keyword">let</span> even = head.next</span><br><span class="line">    <span class="keyword">let</span> evenHead = head.next</span><br><span class="line">    <span class="keyword">while</span>(even !== <span class="literal">null</span> &amp;&amp; even.next !== <span class="literal">null</span>) {</span><br><span class="line">        odd.next = odd.next.next</span><br><span class="line">        odd = odd.next</span><br><span class="line">        even.next = even.next.next </span><br><span class="line">        even = even.next</span><br><span class="line">    }</span><br><span class="line">    odd.next = evenHead</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 349.两个数组地交集</span></span><br><span class="line"><span class="comment"> * 给定两个数组，编写一个函数来计算它们的交集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(nums2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums1) {</span><br><span class="line">        <span class="comment">// 数组搜索值，复杂度是O(n)，set map has，复杂度为O(1)</span></span><br><span class="line">        <span class="keyword">if</span> (set.has(num)) {</span><br><span class="line">            result.add(num)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(result)</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 419.甲板上的战舰</span></span><br><span class="line"><span class="comment"> * 给定一个二维的甲板，请计算出有多少艘战舰，战舰用'X'表示，</span></span><br><span class="line"><span class="comment"> * 空位用'.'表示。你需要遵守以下规则：</span></span><br><span class="line"><span class="comment"> * 1.给你一个有效地甲板，仅由战舰或者空位组成。</span></span><br><span class="line"><span class="comment"> * 战舰只能水平或者垂直放置，换句话说战舰只能由1xN(1行，N列)组成，或者Nx1(N行，1列)组成，</span></span><br><span class="line"><span class="comment"> * 其中N可以是任意大小。</span></span><br><span class="line"><span class="comment"> * 两艘战舰之间至少有一个水平或者垂直的空位分隔，即没有相邻地战舰。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBattleships = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>{</span><br><span class="line">    <span class="comment">// 沉没算法, 深度优先算法</span></span><br><span class="line">    <span class="comment">// let result = 0</span></span><br><span class="line">    <span class="comment">// for (let row = 0; row &lt; board.length; row++) {</span></span><br><span class="line">    <span class="comment">//     for (let col = 0; col &lt; board[0].length; col++) {</span></span><br><span class="line">    <span class="comment">//         if (board[row][col] === 'X') {</span></span><br><span class="line">    <span class="comment">//             result++</span></span><br><span class="line">    <span class="comment">//             dfs(row, col)</span></span><br><span class="line">    <span class="comment">//         }</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// function dfs(row, col) {</span></span><br><span class="line">    <span class="comment">//     if (row &lt; 0 || row &gt;= board.length || col &lt; 0 || col &gt;= board[0].length || board[row][col] !== 'X') {</span></span><br><span class="line">    <span class="comment">//         return</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">//     board[row][col] = '.'</span></span><br><span class="line">    <span class="comment">//     dfs(row - 1, col)</span></span><br><span class="line">    <span class="comment">//     dfs(row + 1, col) </span></span><br><span class="line">    <span class="comment">//     dfs(row, col - 1)</span></span><br><span class="line">    <span class="comment">//     dfs(row, col + 1)</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// return result</span></span><br><span class="line">    <span class="comment">// 进阶算法</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; board.length; row++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; board[<span class="number">0</span>].length; col++) {</span><br><span class="line">            <span class="keyword">if</span> (board[row][col] === <span class="string">'X'</span>) {</span><br><span class="line">                <span class="comment">// 判断是否在横向地中心位置</span></span><br><span class="line">                <span class="keyword">if</span> (row &gt; <span class="number">0</span> &amp;&amp; board[row - <span class="number">1</span>][col] === <span class="string">'X'</span>) {</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 判断是否在垂直方向地中心位置</span></span><br><span class="line">                <span class="keyword">if</span> (col &gt; <span class="number">0</span> &amp;&amp; board[row][col - <span class="number">1</span>] === <span class="string">'X'</span>) {</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                }</span><br><span class="line">                result++</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 445.两数相加2</span></span><br><span class="line"><span class="comment"> * 给你两个非空链表来表示两个非负整数，数字最高位位于链表地开始位置，它们的每个节点只存储一</span></span><br><span class="line"><span class="comment"> * 位数字，</span></span><br><span class="line"><span class="comment"> * 将这两数相加会返回一个新的链表。</span></span><br><span class="line"><span class="comment"> * 你可以假设除了数字0之外，这两个数字不会以零开头。</span></span><br><span class="line"><span class="comment"> * 进阶：如果输入链表不能修改该如何处理？换句话说你不能对链表中地节点进行翻转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>{</span><br><span class="line">    <span class="comment">// 利用栈先进后出地特点，进行计算。将节点压入栈中</span></span><br><span class="line">    <span class="keyword">let</span> stack1 = [], stack2 = []</span><br><span class="line">    <span class="keyword">while</span>(l1 !== <span class="literal">null</span>) {</span><br><span class="line">        stack1.push(l1.val)</span><br><span class="line">        l1 = l1.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(l2 !== <span class="literal">null</span>) {</span><br><span class="line">        stack2.push(l2.val) </span><br><span class="line">        l2 = l2.next</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>, current = <span class="literal">null</span><span class="comment">//current表示新链表地头部</span></span><br><span class="line">    <span class="keyword">while</span> (stack1.length !== <span class="number">0</span> || stack2.length !== <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (stack1.length !== <span class="number">0</span>) {</span><br><span class="line">            sum += stack1.pop()</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (stack2.length !== <span class="number">0</span>) {</span><br><span class="line">            sum += stack2.pop()</span><br><span class="line">        }</span><br><span class="line">        sum += carry</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>)</span><br><span class="line">        <span class="comment">// 获取进位</span></span><br><span class="line">        carry = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>)</span><br><span class="line">        node.next = current</span><br><span class="line">        current = node</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (carry !== <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> ListNode(carry)</span><br><span class="line">        node.next = current</span><br><span class="line">        current = node</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> current</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 509.菲波那切数列</span></span><br><span class="line"><span class="comment"> * 斐波那契数，通常用&nbsp;F(n) 表示，形成的序列称为 斐波那契数列 。该数列由&nbsp;0 和 1 开始，后面的</span></span><br><span class="line"><span class="comment"> * 每一项数字都是前面两项数字的和。也就是：</span></span><br><span class="line"><span class="comment"> * F(0) = 0，F(1)&nbsp;= 1</span></span><br><span class="line"><span class="comment"> * F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</span></span><br><span class="line"><span class="comment"> * 给你 n ，请计算 F(n) 。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态规划：recursion + memoization，即递归和记忆化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// const cache = []</span></span><br><span class="line">    <span class="comment">// cache[0] = 0</span></span><br><span class="line">    <span class="comment">// cache[1] = 1</span></span><br><span class="line">    <span class="comment">// top down思想</span></span><br><span class="line">    <span class="comment">// function memoize(number) {</span></span><br><span class="line">    <span class="comment">//     if (cache[number] !== undefined) {</span></span><br><span class="line">    <span class="comment">//         return cache[number]</span></span><br><span class="line">    <span class="comment">//     }</span></span><br><span class="line">    <span class="comment">//     cache[number] = memoize(number - 1) + memoize(number - 2)</span></span><br><span class="line">    <span class="comment">//     return cache[number]</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// return result = memoize(n)</span></span><br><span class="line">    <span class="comment">// bottom up思想</span></span><br><span class="line">    <span class="comment">// for (let i = 2; i &lt;= n; i++) {</span></span><br><span class="line">    <span class="comment">//     cache[i] = cache[i - 1] + cache[i - 2]</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    <span class="comment">// return cache[n]</span></span><br><span class="line">    <span class="comment">// bottom up思想空间复杂度优化，不用再维护一个cache数组</span></span><br><span class="line">    <span class="keyword">let</span> prev2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> prev1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) {</span><br><span class="line">        result = prev1 + prev2</span><br><span class="line">        prev2 = prev1</span><br><span class="line">        prev1 = result</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 680.验证回文字符串2</span></span><br><span class="line"><span class="comment"> * 给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> validPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">left, right</span>) </span>{</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="keyword">if</span> (s[left] !== s[right]) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">            left++</span><br><span class="line">            right--</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = s.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">        <span class="keyword">if</span> (s[left] !== s[right]) {</span><br><span class="line">            <span class="keyword">return</span> isPalindrome(left + <span class="number">1</span>, right) || isPalindrome(left, right - <span class="number">1</span>)</span><br><span class="line">        }</span><br><span class="line">        left++</span><br><span class="line">        right--</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 695.岛屿地最大面积</span></span><br><span class="line"><span class="comment"> * 给定一个包含了一些 0 和 1 的非空二维数组&nbsp;grid 。</span></span><br><span class="line"><span class="comment"> * 一个&nbsp;岛屿&nbsp;是由一些相邻的&nbsp;1&nbsp;(代表土地) 构成的组合，</span></span><br><span class="line"><span class="comment"> * 这里的「相邻」要求两个 1 必须在水平或者竖直方向上相邻。你可以假设&nbsp;grid </span></span><br><span class="line"><span class="comment"> * 的四个边缘都被 0（代表水）包围着。</span></span><br><span class="line"><span class="comment"> * 找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为 0 。)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxAreaOfIsland = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; grid.length; row++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; grid[<span class="number">0</span>].length; col++) {</span><br><span class="line">            <span class="keyword">if</span> (grid[row][col] === <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">const</span> count = dfs(row, col)</span><br><span class="line">                result = <span class="built_in">Math</span>.max(result, count)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">row, col</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= grid.length || col &lt; <span class="number">0</span> || col &gt;= grid[<span class="number">0</span>].length || grid[row][col] === <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        }</span><br><span class="line">        grid[row][col] = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 当前格子为1</span></span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">        count += dfs(row, col - <span class="number">1</span>)</span><br><span class="line">        count += dfs(row, col + <span class="number">1</span>)</span><br><span class="line">        count += dfs(row - <span class="number">1</span>, col)</span><br><span class="line">        count += dfs(row + <span class="number">1</span>, col)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 704.二分查找</span></span><br><span class="line"><span class="comment"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target，</span></span><br><span class="line"><span class="comment"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor((left + right) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] === target) {</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) {</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 733.图像渲染</span></span><br><span class="line"><span class="comment"> * 有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</span></span><br><span class="line"><span class="comment"> * 给你一个坐标&nbsp;(sr, sc)&nbsp;表示图像渲染开始的像素值（行 ，列）和一个新的颜色值&nbsp;newColor，</span></span><br><span class="line"><span class="comment"> * 让你重新上色这幅图像。</span></span><br><span class="line"><span class="comment"> * 为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连</span></span><br><span class="line"><span class="comment"> * 像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连</span></span><br><span class="line"><span class="comment"> * 像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</span></span><br><span class="line"><span class="comment"> * 最后返回经过上色渲染后的图像。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> floodFill = <span class="function"><span class="keyword">function</span>(<span class="params">image, sr, sc, newColor</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (image[sr][sc] === newColor) {</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">const</span> oldColor = image[sr][sc]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">sr, sc</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (sr &lt; <span class="number">0</span> || sr &gt;= image.length || sc &lt; <span class="number">0</span> || sc &gt;= image[<span class="number">0</span>].length || image[sr][sc] !== oldColor) {</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        image[sr][sc] = newColor</span><br><span class="line">        dfs(sr, sc - <span class="number">1</span>)</span><br><span class="line">        dfs(sr, sc + <span class="number">1</span>)</span><br><span class="line">        dfs(sr - <span class="number">1</span>, sc)</span><br><span class="line">        dfs(sr + <span class="number">1</span>, sc)</span><br><span class="line">    }</span><br><span class="line">    dfs(sr, sc)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode刷题 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker一键部署dnmp</title>
      <link href="/2021/07/07/Docker%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2dnmp/"/>
      <url>/2021/07/07/Docker%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2dnmp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一直想用docker部署一套开发环境，可能是因为太懒的缘故，觉得在Mac上有一堆成熟的套件可用，比如：xampp、mamp等等。就没有动手。近来，自己的Mac更新了最新测试版系统，mamp由于未得到更新，所以一直处以闪崩状态，不得已想到了docker…</p></blockquote><span id="more"></span><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><ul><li>1.安装环境：Mac OS</li><li>2.node版本：latest</li><li>3.预先安装：Homebrew</li></ul><h4 id="2-预先安装：Homebrew"><a href="#2-预先安装：Homebrew" class="headerlink" title="2.预先安装：Homebrew"></a>2.预先安装：Homebrew</h4><p>由于众所周知的原因，Homebrew官网的安装命令极易导致：</p><blockquote><p>Failed to connect to raw.githubusercontent.com port 443: Connection refused</p></blockquote><p>下面转载大神写的安装脚本，十分方便。打开terminal，粘贴下属命令即可等待安装：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">"<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-关于docker"><a href="#3-关于docker" class="headerlink" title="3.关于docker"></a>3.关于docker</h4><h5 id="3-1-什么是docker？"><a href="#3-1-什么是docker？" class="headerlink" title="3.1. 什么是docker？"></a>3.1. 什么是docker？</h5><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h5 id="3-2-docker常用的标准化套件"><a href="#3-2-docker常用的标准化套件" class="headerlink" title="3.2. docker常用的标准化套件"></a>3.2. docker常用的标准化套件</h5><ul><li>1.Docker Engine</li><li>2.Docker CLI Client</li><li>3.Docker Compose</li><li>4.Docker Machine</li></ul><h5 id="3-3-docker安装命令"><a href="#3-3-docker安装命令" class="headerlink" title="3.3. docker安装命令"></a>3.3. docker安装命令</h5><p>通过第二本我们顺利的安装了homebrew，所以下面通过brew安装docker：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></tbody></table></figure><h4 id="4-快速使用"><a href="#4-快速使用" class="headerlink" title="4.快速使用"></a>4.快速使用</h4><h5 id="4-1-本地安装"><a href="#4-1-本地安装" class="headerlink" title="4.1. 本地安装"></a>4.1. 本地安装</h5><ul><li><code>git</code></li><li><code>Docker</code>(系统需为Linux，Windows 10 Build 15063+，或MacOS 10.12+，且必须要<code>64</code>位）</li><li><code>docker-compose 1.7.0+</code></li></ul><h5 id="4-2-clone项目："><a href="#4-2-clone项目：" class="headerlink" title="4.2. clone项目："></a>4.2. <code>clone</code>项目：</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yeszao/dnmp.git</span><br></pre></td></tr></tbody></table></figure><h5 id="4-3-如果不是root用户，还需将当前用户加入docker用户组："><a href="#4-3-如果不是root用户，还需将当前用户加入docker用户组：" class="headerlink" title="4.3. 如果不是root用户，还需将当前用户加入docker用户组："></a>4.3. 如果不是<code>root</code>用户，还需将当前用户加入<code>docker</code>用户组：</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo gpasswd -a <span class="variable">${USER}</span> docker</span><br></pre></td></tr></tbody></table></figure><h5 id="4-4-拷贝并命名配置文件（Windows系统请用copy命令），启动："><a href="#4-4-拷贝并命名配置文件（Windows系统请用copy命令），启动：" class="headerlink" title="4.4. 拷贝并命名配置文件（Windows系统请用copy命令），启动："></a>4.4. 拷贝并命名配置文件（Windows系统请用<code>copy</code>命令），启动：</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> dnmp                                           <span class="comment"># 进入项目目录</span></span><br><span class="line">$ cp env.sample .env                                <span class="comment"># 复制环境变量文件</span></span><br><span class="line">$ cp docker-compose.sample.yml docker-compose.yml   <span class="comment"># 复制 docker-compose 配置文件。默认启动3个服务：</span></span><br><span class="line">                                                    <span class="comment"># Nginx、PHP7和MySQL8。要开启更多其他服务，如Redis、</span></span><br><span class="line">                                                    <span class="comment"># PHP5.6、PHP5.4、MongoDB，ElasticSearch等，请删</span></span><br><span class="line">                                                    <span class="comment"># 除服务块前的注释</span></span><br><span class="line">$ docker-compose up                                 <span class="comment"># 启动</span></span><br></pre></td></tr></tbody></table></figure><h5 id="4-5-在浏览器中访问："><a href="#4-5-在浏览器中访问：" class="headerlink" title="4.5. 在浏览器中访问："></a>4.5. 在浏览器中访问：</h5><p><code>http://localhost</code>或<code>https://localhost</code>(自签名HTTPS演示)就能看到效果，PHP代码在文件<code>./www/localhost/index.php</code>。</p><h4 id="5-PHP和扩展"><a href="#5-PHP和扩展" class="headerlink" title="5.PHP和扩展"></a>5.PHP和扩展</h4><h5 id="5-1-切换Nginx使用的PHP版本"><a href="#5-1-切换Nginx使用的PHP版本" class="headerlink" title="5.1. 切换Nginx使用的PHP版本"></a>5.1. 切换Nginx使用的PHP版本</h5><p>首先，需要启动其他版本的PHP，比如PHP5.4，那就先在<code>docker-compose.yml</code>文件中删除PHP5.4前面的注释，再启动PHP5.4容器。</p><p>PHP5.4启动后，打开Nginx 配置，修改<code>fastcgi_pass</code>的主机地址，由<code>php</code>改为<code>php54</code>，如下：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">fastcgi_pass   php:9000;</span><br></pre></td></tr></tbody></table></figure><p>为：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">fastcgi_pass   php54:9000;</span><br></pre></td></tr></tbody></table></figure><p>其中 <code>php</code> 和 <code>php54</code> 是<code>docker-compose.yml</code>文件中服务器的名称。</p><p>最后，<strong>重启 Nginx</strong> 生效。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it nginx nginx -s reload</span><br></pre></td></tr></tbody></table></figure><p>这里两个<code>nginx</code>，第一个是容器名，第二个是容器中的<code>nginx</code>程序。</p><h5 id="5-2-安装PHP扩展"><a href="#5-2-安装PHP扩展" class="headerlink" title="5.2. 安装PHP扩展"></a>5.2. 安装PHP扩展</h5><p>PHP的很多功能都是通过扩展实现，而安装扩展是一个略费时间的过程，<br>所以，除PHP内置扩展外，在<code>env.sample</code>文件中我们仅默认安装少量扩展，<br>如果要安装更多扩展，请打开你的<code>.env</code>文件修改如下的PHP配置，<br>增加需要的PHP扩展：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PHP_EXTENSIONS=pdo_mysql,opcache,redis       <span class="comment"># PHP 要安装的扩展列表，英文逗号隔开</span></span><br><span class="line">PHP54_EXTENSIONS=opcache,redis                 <span class="comment"># PHP 5.4要安装的扩展列表，英文逗号隔开</span></span><br></pre></td></tr></tbody></table></figure><p>然后重新build PHP镜像。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose build php</span><br></pre></td></tr></tbody></table></figure><p>可用的扩展请看同文件的<code>env.sample</code>注释块说明。</p><h5 id="5-3-快速安装php扩展"><a href="#5-3-快速安装php扩展" class="headerlink" title="5.3. 快速安装php扩展"></a>5.3. 快速安装php扩展</h5><h6 id="5-3-1-进入容器"><a href="#5-3-1-进入容器" class="headerlink" title="5.3.1. 进入容器:"></a>5.3.1. 进入容器:</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"></span><br><span class="line">install-php-extensions apcu </span><br></pre></td></tr></tbody></table></figure><h6 id="5-3-2-支持快速安装扩展列表"><a href="#5-3-2-支持快速安装扩展列表" class="headerlink" title="5.3.2. 支持快速安装扩展列表"></a>5.3.2. 支持快速安装扩展列表</h6><!-- START OF EXTENSIONS TABLE --><!-- ########################################################### --><!-- #                                                         # --><!-- #  DO NOT EDIT THIS TABLE: IT IS GENERATED AUTOMATICALLY  # --><!-- #                                                         # --><!-- #  EDIT THE data/supported-extensions FILE INSTEAD        # --><!-- #                                                         # --><!-- ########################################################### --><table><thead><tr><th align="center">Extension</th><th align="center">PHP 5.5</th><th align="center">PHP 5.6</th><th align="center">PHP 7.0</th><th align="center">PHP 7.1</th><th align="center">PHP 7.2</th><th align="center">PHP 7.3</th><th align="center">PHP 7.4</th><th align="center">PHP 8.0</th></tr></thead><tbody><tr><td align="center">amqp</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">apcu</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">apcu_bc</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">ast</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">bcmath</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">bz2</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">calendar</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">cmark</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">csv</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">dba</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">decimal</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">ds</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">enchant<a href="#special-requirements-for-enchant">*</a></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">ev</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">excimer</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">exif</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">ffi</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">gd</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">gearman</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">geoip</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">geospatial</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">gettext</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">gmagick</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">gmp</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">gnupg</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">grpc</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">http</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">igbinary</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">imagick</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">imap</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">inotify</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">interbase</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">intl</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">ioncube_loader</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">json_post</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">ldap</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">mailparse</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">maxminddb</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">mcrypt</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">memcache</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">memcached</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">mongo</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">mongodb</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">mosquitto</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">msgpack</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">mssql</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">mysql</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">mysqli</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">oauth</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">oci8</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">odbc</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">opcache</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">opencensus</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">parallel<a href="#special-requirements-for-parallel">*</a></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">pcntl</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pcov</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_dblib</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_firebird</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_mysql</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_oci</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_odbc</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_pgsql</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pdo_sqlsrv<a href="#special-requirements-for-pdo_sqlsrv">*</a></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pgsql</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">propro</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">protobuf</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pspell</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">pthreads<a href="#special-requirements-for-pthreads">*</a></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">raphf</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">rdkafka</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">recode</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">redis</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">seaslog</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">shmop</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">smbclient</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">snmp</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">snuffleupagus</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">soap</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">sockets</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">solr</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">sqlsrv<a href="#special-requirements-for-sqlsrv">*</a></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">ssh2</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">swoole</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">sybase_ct</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">sysvmsg</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">sysvsem</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">sysvshm</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">tensor</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">tidy</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">timezonedb</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">uopz</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">uuid</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">vips<a href="#special-requirements-for-vips">*</a></td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">wddx</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">xdebug</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">xhprof</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">xlswriter</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">xmlrpc</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">xsl</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">yaml</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">yar</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">zip</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="center">zookeeper</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center"></td></tr><tr><td align="center">zstd</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr></tbody></table><p>此扩展来自<a href="https://github.com/mlocati/docker-php-extension-installer">https://github.com/mlocati/docker-php-extension-installer</a><br>参考示例文件</p><h5 id="5-4-Host中使用php命令行（php-cli）"><a href="#5-4-Host中使用php命令行（php-cli）" class="headerlink" title="5.4. Host中使用php命令行（php-cli）"></a>5.4. Host中使用php命令行（php-cli）</h5><h6 id="5-4-1-参考bash-alias-sample示例文件，将对应-php-cli-函数拷贝到主机的-bashrc文件。"><a href="#5-4-1-参考bash-alias-sample示例文件，将对应-php-cli-函数拷贝到主机的-bashrc文件。" class="headerlink" title="5.4.1. 参考bash.alias.sample示例文件，将对应 php cli 函数拷贝到主机的 ~/.bashrc文件。"></a>5.4.1. 参考<a href="bash.alias.sample">bash.alias.sample</a>示例文件，将对应 php cli 函数拷贝到主机的 <code>~/.bashrc</code>文件。</h6><h6 id="5-4-2-让文件起效："><a href="#5-4-2-让文件起效：" class="headerlink" title="5.4.2. 让文件起效："></a>5.4.2. 让文件起效：</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h6 id="5-4-3-然后就可以在主机中执行php命令了："><a href="#5-4-3-然后就可以在主机中执行php命令了：" class="headerlink" title="5.4.3. 然后就可以在主机中执行php命令了："></a>5.4.3. 然后就可以在主机中执行php命令了：</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">~ php -v</span><br><span class="line">PHP 7.2.13 (cli) (built: Dec 21 2018 02:22:47) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.2.13, Copyright (c) 1999-2018, by Zend Technologies</span><br><span class="line">    with Xdebug v2.6.1, Copyright (c) 2002-2018, by Derick Rethans</span><br></pre></td></tr></tbody></table></figure><h5 id="5-5-使用composer"><a href="#5-5-使用composer" class="headerlink" title="5.5. 使用composer"></a>5.5. 使用composer</h5><p><strong>方法1：主机中使用composer命令</strong></p><h6 id="5-5-1-确定composer缓存的路径。比如，我的dnmp下载在-dnmp目录，那composer的缓存路径就是-dnmp-data-composer。"><a href="#5-5-1-确定composer缓存的路径。比如，我的dnmp下载在-dnmp目录，那composer的缓存路径就是-dnmp-data-composer。" class="headerlink" title="5.5.1. 确定composer缓存的路径。比如，我的dnmp下载在~/dnmp目录，那composer的缓存路径就是~/dnmp/data/composer。"></a>5.5.1. 确定composer缓存的路径。比如，我的dnmp下载在<code>~/dnmp</code>目录，那composer的缓存路径就是<code>~/dnmp/data/composer</code>。</h6><h6 id="5-5-2-参考bash-alias-sample示例文件，将对应-php-composer-函数拷贝到主机的-bashrc文件。"><a href="#5-5-2-参考bash-alias-sample示例文件，将对应-php-composer-函数拷贝到主机的-bashrc文件。" class="headerlink" title="5.5.2. 参考bash.alias.sample示例文件，将对应 php composer 函数拷贝到主机的 ~/.bashrc文件。"></a>5.5.2. 参考<a href="bash.alias.sample">bash.alias.sample</a>示例文件，将对应 php composer 函数拷贝到主机的 <code>~/.bashrc</code>文件。</h6><blockquote><p>这里需要注意的是，示例文件中的<code>~/dnmp/data/composer</code>目录需是第一步确定的目录。</p></blockquote><h6 id="5-5-3-让文件起效："><a href="#5-5-3-让文件起效：" class="headerlink" title="5.5.3. 让文件起效："></a>5.5.3. 让文件起效：</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><h6 id="5-5-4-在主机的任何目录下就能用composer了："><a href="#5-5-4-在主机的任何目录下就能用composer了：" class="headerlink" title="5.5.4. 在主机的任何目录下就能用composer了："></a>5.5.4. 在主机的任何目录下就能用composer了：</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/dnmp/www/</span><br><span class="line">composer create-project yeszao/fastphp project --no-dev</span><br></pre></td></tr></tbody></table></figure><h6 id="5-5-5-（可选）第一次使用-composer-会在-dnmp-data-composer-目录下生成一个config-json文件，可以在这个文件中指定国内仓库，例如："><a href="#5-5-5-（可选）第一次使用-composer-会在-dnmp-data-composer-目录下生成一个config-json文件，可以在这个文件中指定国内仓库，例如：" class="headerlink" title="5.5.5. （可选）第一次使用 composer 会在 ~/dnmp/data/composer 目录下生成一个config.json文件，可以在这个文件中指定国内仓库，例如："></a>5.5.5. （可选）第一次使用 composer 会在 <code>~/dnmp/data/composer</code> 目录下生成一个<strong>config.json</strong>文件，可以在这个文件中指定国内仓库，例如：</h6><figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"config"</span>: {},</span><br><span class="line">    <span class="attr">"repositories"</span>: {</span><br><span class="line">        <span class="attr">"packagist"</span>: {</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"composer"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"https://packagist.laravel-china.org"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>方法二：容器内使用composer命令</strong></p><p>还有另外一种方式，就是进入容器，再执行<code>composer</code>命令，以PHP7容器为例：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line"><span class="built_in">cd</span> /www/localhost</span><br><span class="line">composer update</span><br></pre></td></tr></tbody></table></figure><h4 id="6-管理命令"><a href="#6-管理命令" class="headerlink" title="6. 管理命令"></a>6. 管理命令</h4><h5 id="6-1-服务器启动和构建命令"><a href="#6-1-服务器启动和构建命令" class="headerlink" title="6.1. 服务器启动和构建命令"></a>6.1. 服务器启动和构建命令</h5><p>如需管理服务，请在命令后面加上服务器名称，例如：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker-compose up                         <span class="comment"># 创建并且启动所有容器</span></span><br><span class="line">$ docker-compose up -d                      <span class="comment"># 创建并且后台运行方式启动所有容器</span></span><br><span class="line">$ docker-compose up nginx php mysql         <span class="comment"># 创建并且启动nginx、php、mysql的多个容器</span></span><br><span class="line">$ docker-compose up -d nginx php  mysql     <span class="comment"># 创建并且已后台运行的方式启动nginx、php、mysql容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ docker-compose start php                  <span class="comment"># 启动服务</span></span><br><span class="line">$ docker-compose stop php                   <span class="comment"># 停止服务</span></span><br><span class="line">$ docker-compose restart php                <span class="comment"># 重启服务</span></span><br><span class="line">$ docker-compose build php                  <span class="comment"># 构建或者重新构建服务</span></span><br><span class="line"></span><br><span class="line">$ docker-compose rm php                     <span class="comment"># 删除并且停止php容器</span></span><br><span class="line">$ docker-compose down                       <span class="comment"># 停止并删除容器，网络，图像和挂载卷</span></span><br></pre></td></tr></tbody></table></figure><h5 id="6-2-添加快捷命令"><a href="#6-2-添加快捷命令" class="headerlink" title="6.2. 添加快捷命令"></a>6.2. 添加快捷命令</h5><p>在开发的时候，我们可能经常使用<code>docker exec -it</code>进入到容器中，把常用的做成命令别名是个省事的方法。</p><p>首先，在主机中查看可用的容器：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker ps           <span class="comment"># 查看所有运行中的容器</span></span><br><span class="line">$ docker ps -a        <span class="comment"># 所有容器</span></span><br></pre></td></tr></tbody></table></figure><p>输出的<code>NAMES</code>那一列就是容器的名称，如果使用默认配置，那么名称就是<code>nginx</code>、<code>php</code>、<code>php56</code>、<code>mysql</code>等。</p><p>然后，打开<code>~/.bashrc</code>或者<code>~/.zshrc</code>文件，加上：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> dnginx=<span class="string">'docker exec -it nginx /bin/sh'</span></span><br><span class="line"><span class="built_in">alias</span> dphp=<span class="string">'docker exec -it php /bin/sh'</span></span><br><span class="line"><span class="built_in">alias</span> dphp56=<span class="string">'docker exec -it php56 /bin/sh'</span></span><br><span class="line"><span class="built_in">alias</span> dphp54=<span class="string">'docker exec -it php54 /bin/sh'</span></span><br><span class="line"><span class="built_in">alias</span> dmysql=<span class="string">'docker exec -it mysql /bin/bash'</span></span><br><span class="line"><span class="built_in">alias</span> dredis=<span class="string">'docker exec -it redis /bin/sh'</span></span><br></pre></td></tr></tbody></table></figure><p>下次进入容器就非常快捷了，如进入php容器：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ dphp</span><br></pre></td></tr></tbody></table></figure><h5 id="6-3-查看docker网络"><a href="#6-3-查看docker网络" class="headerlink" title="6.3. 查看docker网络"></a>6.3. 查看docker网络</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ifconfig docker0</span><br></pre></td></tr></tbody></table></figure><p>用于填写<code>extra_hosts</code>容器访问宿主机的<code>hosts</code>地址</p><h4 id="7-使用Log"><a href="#7-使用Log" class="headerlink" title="7. 使用Log"></a>7. 使用Log</h4><p>Log文件生成的位置依赖于conf下各log配置的值。</p><h5 id="7-1-Nginx日志"><a href="#7-1-Nginx日志" class="headerlink" title="7.1. Nginx日志"></a>7.1. Nginx日志</h5><p>Nginx日志是我们用得最多的日志，所以我们单独放在根目录<code>log</code>下。</p><p><code>log</code>会目录映射Nginx容器的<code>/var/log/nginx</code>目录，所以在Nginx配置文件中，需要输出log的位置，我们需要配置到<code>/var/log/nginx</code>目录，如：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/nginx.localhost.error.log  warn;</span><br></pre></td></tr></tbody></table></figure><h5 id="7-2-PHP-FPM日志"><a href="#7-2-PHP-FPM日志" class="headerlink" title="7.2. PHP-FPM日志"></a>7.2. PHP-FPM日志</h5><p>大部分情况下，PHP-FPM的日志都会输出到Nginx的日志中，所以不需要额外配置。</p><p>另外，建议直接在PHP中打开错误日志：</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">error_reporting(E_ALL);</span><br><span class="line">ini_set(<span class="string">'error_reporting'</span>, <span class="string">'on'</span>);</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="string">'on'</span>);</span><br></pre></td></tr></tbody></table></figure><p>如果确实需要，可按一下步骤开启（在容器中）。</p><h6 id="7-2-1-进入容器，创建日志文件并修改权限："><a href="#7-2-1-进入容器，创建日志文件并修改权限：" class="headerlink" title="7.2.1. 进入容器，创建日志文件并修改权限："></a>7.2.1. 进入容器，创建日志文件并修改权限：</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it php /bin/sh</span><br><span class="line">$ mkdir /var/<span class="built_in">log</span>/php</span><br><span class="line">$ <span class="built_in">cd</span> /var/<span class="built_in">log</span>/php</span><br><span class="line">$ touch php-fpm.error.log</span><br><span class="line">$ chmod a+w php-fpm.error.log</span><br></pre></td></tr></tbody></table></figure><h6 id="7-2-2-主机上打开并修改PHP-FPM的配置文件conf-php-fpm-conf，找到如下一行，删除注释，并改值为："><a href="#7-2-2-主机上打开并修改PHP-FPM的配置文件conf-php-fpm-conf，找到如下一行，删除注释，并改值为：" class="headerlink" title="7.2.2. 主机上打开并修改PHP-FPM的配置文件conf/php-fpm.conf，找到如下一行，删除注释，并改值为："></a>7.2.2. 主机上打开并修改PHP-FPM的配置文件<code>conf/php-fpm.conf</code>，找到如下一行，删除注释，并改值为：</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">php_admin_value[error_log] = /var/<span class="built_in">log</span>/php/php-fpm.error.log</span><br></pre></td></tr></tbody></table></figure><h6 id="7-2-3-重启PHP-FPM容器。"><a href="#7-2-3-重启PHP-FPM容器。" class="headerlink" title="7.2.3. 重启PHP-FPM容器。"></a>7.2.3. 重启PHP-FPM容器。</h6><h5 id="7-3-MySQL日志"><a href="#7-3-MySQL日志" class="headerlink" title="7.3. MySQL日志"></a>7.3. MySQL日志</h5><p>因为MySQL容器中的MySQL使用的是<code>mysql</code>用户启动，它无法自行在<code>/var/log</code>下的增加日志文件。所以，我们把MySQL的日志放在与data一样的目录，即项目的<code>mysql</code>目录下，对应容器中的<code>/var/lib/mysql/</code>目录。</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">slow-query-log-file     = /var/lib/mysql/mysql.slow.log</span><br><span class="line">log-error               = /var/lib/mysql/mysql.error.log</span><br></pre></td></tr></tbody></table></figure><p>以上是mysql.conf中的日志文件的配置。</p><h4 id="8-数据库管理"><a href="#8-数据库管理" class="headerlink" title="8. 数据库管理"></a>8. 数据库管理</h4><p>本项目默认在<code>docker-compose.yml</code>中不开启了用于MySQL在线管理的<em>phpMyAdmin</em>，以及用于redis在线管理的<em>phpRedisAdmin</em>，可以根据需要修改或删除。</p><h5 id="8-1-phpMyAdmin"><a href="#8-1-phpMyAdmin" class="headerlink" title="8.1 phpMyAdmin"></a>8.1 phpMyAdmin</h5><p>phpMyAdmin容器映射到主机的端口地址是：<code>8080</code>，所以主机上访问phpMyAdmin的地址是：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost:8080</span><br></pre></td></tr></tbody></table></figure><p>MySQL连接信息：</p><ul><li>host：(本项目的MySQL容器网络)</li><li>port：<code>3306</code></li><li>username：（手动在phpmyadmin界面输入）</li><li>password：（手动在phpmyadmin界面输入）</li></ul><h5 id="8-2-phpRedisAdmin"><a href="#8-2-phpRedisAdmin" class="headerlink" title="8.2 phpRedisAdmin"></a>8.2 phpRedisAdmin</h5><p>phpRedisAdmin容器映射到主机的端口地址是：<code>8081</code>，所以主机上访问phpMyAdmin的地址是：</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost:8081</span><br></pre></td></tr></tbody></table></figure><p>Redis连接信息如下：</p><ul><li>host: (本项目的Redis容器网络)</li><li>port: <code>6379</code></li></ul><h4 id="9-在正式环境中安全使用"><a href="#9-在正式环境中安全使用" class="headerlink" title="9. 在正式环境中安全使用"></a>9. 在正式环境中安全使用</h4><p>要在正式环境中使用，请：</p><ol><li>在php.ini中关闭XDebug调试</li><li>增强MySQL数据库访问的安全策略</li><li>增强redis访问的安全策略</li></ol><h4 id="10-常见问题"><a href="#10-常见问题" class="headerlink" title="10. 常见问题"></a>10. 常见问题</h4><h5 id="10-1-如何在PHP代码中使用curl？"><a href="#10-1-如何在PHP代码中使用curl？" class="headerlink" title="10.1. 如何在PHP代码中使用curl？"></a>10.1. 如何在PHP代码中使用curl？</h5><p>参考这个issue：<a href="https://github.com/yeszao/dnmp/issues/91">https://github.com/yeszao/dnmp/issues/91</a></p><h5 id="10-2-Docker使用cron定时任务"><a href="#10-2-Docker使用cron定时任务" class="headerlink" title="10.2. Docker使用cron定时任务"></a>10.2. Docker使用cron定时任务</h5><p><a href="https://www.awaimai.com/2615.html">Docker使用cron定时任务</a></p><h5 id="10-3-Docker容器时间"><a href="#10-3-Docker容器时间" class="headerlink" title="10.3. Docker容器时间"></a>10.3. Docker容器时间</h5><p>容器时间在.env文件中配置<code>TZ</code>变量，所有支持的时区请看<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表·维基百科</a>或者<a href="https://www.php.net/manual/zh/timezones.php">PHP所支持的时区列表·PHP官网</a>。</p><h5 id="10-4-如何连接MySQL和Redis服务器"><a href="#10-4-如何连接MySQL和Redis服务器" class="headerlink" title="10.4. 如何连接MySQL和Redis服务器"></a>10.4. 如何连接MySQL和Redis服务器</h5><p>这要分两种情况，</p><p>第一种情况，在<strong>PHP代码中</strong>。</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 连接MySQL</span></span><br><span class="line"><span class="variable">$dbh</span> = <span class="keyword">new</span> PDO(<span class="string">'mysql:host=mysql;dbname=mysql'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接Redis</span></span><br><span class="line"><span class="variable">$redis</span> = <span class="keyword">new</span> Redis();</span><br><span class="line"><span class="variable">$redis</span>-&gt;connect(<span class="string">'redis'</span>, <span class="number">6379</span>);</span><br></pre></td></tr></tbody></table></figure><p>因为容器与容器是<code>expose</code>端口联通的，而且在同一个<code>networks</code>下，所以连接的<code>host</code>参数直接用容器名称，<code>port</code>参数就是容器内部的端口。更多请参考<a href="https://www.awaimai.com/2138.html">《docker-compose ports和expose的区别》</a>。</p><p>第二种情况，<strong>在主机中</strong>通过<strong>命令行</strong>或者<strong>Navicat</strong>等工具连接。主机要连接mysql和redis的话，要求容器必须经过<code>ports</code>把端口映射到主机了。以 mysql 为例，<code>docker-compose.yml</code>文件中有这样的<code>ports</code>配置：<code>3306:3306</code>，就是主机的3306和容器的3306端口形成了映射，所以我们可以这样连接：</p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ mysql -h127.0.0.1 -uroot -p123456 -P3306</span><br><span class="line">$ redis-cli -h127.0.0.1</span><br></pre></td></tr></tbody></table></figure><p>这里<code>host</code>参数不能用localhost是因为它默认是通过sock文件与mysql通信，而容器与主机文件系统已经隔离，所以需要通过TCP方式连接，所以需要指定IP。</p><h5 id="10-5-容器内的php如何连接宿主机MySQL"><a href="#10-5-容器内的php如何连接宿主机MySQL" class="headerlink" title="10.5. 容器内的php如何连接宿主机MySQL"></a>10.5. 容器内的php如何连接宿主机MySQL</h5><h6 id="10-5-1-宿主机执行ifconfig-docker0得到inet就是要连接的ip地址"><a href="#10-5-1-宿主机执行ifconfig-docker0得到inet就是要连接的ip地址" class="headerlink" title="10.5.1. 宿主机执行ifconfig docker0得到inet就是要连接的ip地址"></a>10.5.1. 宿主机执行<code>ifconfig docker0</code>得到<code>inet</code>就是要连接的<code>ip</code>地址</h6><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ ifconfig docker0</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ...</span><br></pre></td></tr></tbody></table></figure><h6 id="10-5-2-运行宿主机Mysql命令行"><a href="#10-5-2-运行宿主机Mysql命令行" class="headerlink" title="10.5.2. 运行宿主机Mysql命令行"></a>10.5.2. 运行宿主机Mysql命令行</h6><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"> mysql<span class="operator">&gt;</span><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'123456'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"> mysql<span class="operator">&gt;</span>flush privileges;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 其中各字符的含义：</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="operator">*</span>.<span class="operator">*</span> 对任意数据库任意表有效</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> "root" "123456" 是数据库用户名和密码</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="string">'%'</span> 允许访问数据库的IP地址，<span class="operator">%</span>意思是任意IP，也可以指定IP</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> flush privileges 刷新权限信息</span><br></pre></td></tr></tbody></table></figure><h6 id="10-5-3-接着直接php容器使用172-0-17-1-3306连接即可"><a href="#10-5-3-接着直接php容器使用172-0-17-1-3306连接即可" class="headerlink" title="10.5.3. 接着直接php容器使用172.0.17.1:3306连接即可"></a>10.5.3. 接着直接php容器使用<code>172.0.17.1:3306</code>连接即可</h6>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> dnmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlappyBird开发笔记03</title>
      <link href="/2021/07/06/FlappyBird%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B003/"/>
      <url>/2021/07/06/FlappyBird%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B003/</url>
      
        <content type="html"><![CDATA[<h4 id="停止定时器原理"><a href="#停止定时器原理" class="headerlink" title="停止定时器原理"></a>停止定时器原理</h4><p><em>每个启动的定时器，都会返回一个number值，是1开始进行递增</em></p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">   timer1 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1000</span>) <span class="comment">//timer = 1</span></span><br><span class="line">   timer2 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1000</span>) <span class="comment">//timer = 2</span></span><br><span class="line">   timer3 = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1000</span>) <span class="comment">//timer = 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止定时器</span></span><br><span class="line">   <span class="built_in">clearInterval</span>(number) <span class="comment">//填1 停止 timer1</span></span><br><span class="line">   <span class="built_in">clearInterval</span>(<span class="number">2</span>) <span class="comment">//填2 停止 timer2</span></span><br><span class="line">   <span class="built_in">clearInterval</span>(<span class="number">3</span>) <span class="comment">//填3 停止 timer3</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h4 id="清除所有定时器"><a href="#清除所有定时器" class="headerlink" title="清除所有定时器"></a>清除所有定时器</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//    首先创建一个新的定时器，记录返回值，其返回值特点，比当前页面中所有定时器总数 + 1</span></span><br><span class="line">    <span class="keyword">var</span> length = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{},<span class="number">1</span>)</span><br><span class="line"><span class="comment">//   for循环遍历，将所有的定时器停止</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= length;i++){</span><br><span class="line">        <span class="built_in">clearInterval</span>(i)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FlappyBird </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlappyBird开发笔记02</title>
      <link href="/2021/07/06/FlappyBird%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B002/"/>
      <url>/2021/07/06/FlappyBird%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B002/</url>
      
        <content type="html"><![CDATA[<h4 id="点击事件监听"><a href="#点击事件监听" class="headerlink" title="点击事件监听"></a>点击事件监听</h4><p><strong>监听的是标签被用户的点击行为</strong></p><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span>{</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>:red;</span></span><br><span class="line"><span class="css">    }</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>  <span class="attr">onclick</span>=<span class="string">"start()"</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//    定义start()</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 监听点击事件第一种：在标签行间直接编写 onclick="处理函数()"</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 处理函数在script标签中定义</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">     alert(<span class="string">"嘿嘿"</span>)</span></span><br><span class="line"><span class="javascript">  }</span></span><br></pre></td></tr></tbody></table></figure><span id="more"></span><h4 id="通过JS动态获取标签，设置样式"><a href="#通过JS动态获取标签，设置样式" class="headerlink" title="通过JS动态获取标签，设置样式"></a>通过JS动态获取标签，设置样式</h4><ol><li>JS获取标签，通过ID<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="comment">// 直接使用符号box来获取标签</span></span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(box);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li>JS动态修改盒子样式<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> <span class="comment">// ID.style.样式名 = "样式值"</span></span></span><br><span class="line"><span class="javascript">    box.style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="javascript">    box.style.color = <span class="string">"blue"</span>;</span></span><br><span class="line"><span class="javascript">    box.style.fontSize = <span class="string">"12px"</span>;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="JS控制盒子位移代码"><a href="#JS控制盒子位移代码" class="headerlink" title="JS控制盒子位移代码"></a>JS控制盒子位移代码</h4><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//通过JS代码移动盒子的套路</span></span><br><span class="line">   <span class="comment">// 1、获取当前盒子位置</span></span><br><span class="line">     <span class="keyword">var</span> now_x = box.offsetLeft;</span><br><span class="line">     <span class="keyword">var</span> now_y = box.offsetTop;</span><br><span class="line">   <span class="comment">// 2、对位置数据进行改变</span></span><br><span class="line">         now_x += <span class="number">50</span>;</span><br><span class="line">         now_y += <span class="number">50</span>;</span><br><span class="line">   <span class="comment">// 3、对位置样式进行改变</span></span><br><span class="line">         box.style.left = now_x + <span class="string">"px"</span>; </span><br><span class="line">         box.style.top  = now_y + <span class="string">"px"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="JS-定时器"><a href="#JS-定时器" class="headerlink" title="JS 定时器"></a>JS 定时器</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JS定时器，能够允许按照一定的时间间隔，去重复执行</span></span><br><span class="line"><span class="comment"> 指定代码段。并且可以通过方法，对定时器进行停止</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 定时器启动：</span></span><br><span class="line"><span class="comment">    var  timer = setInterval(function(){</span></span><br><span class="line"><span class="comment">        要循环执行的代码块</span></span><br><span class="line"><span class="comment">    },时间)</span></span><br><span class="line"><span class="comment"> 定时器停止</span></span><br><span class="line"><span class="comment">     clearInterval(timer)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(count)</span></span><br><span class="line"><span class="javascript">       count++;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">if</span>(count &gt;= <span class="number">5</span>){</span></span><br><span class="line"><span class="javascript">        <span class="comment">//   停止定时器</span></span></span><br><span class="line"><span class="javascript">           <span class="built_in">clearInterval</span>(timer)</span></span><br><span class="line"><span class="javascript">       }</span></span><br><span class="line"><span class="javascript">   },<span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="JS动态获取盒子的尺寸"><a href="#JS动态获取盒子的尺寸" class="headerlink" title="JS动态获取盒子的尺寸"></a>JS动态获取盒子的尺寸</h4><ul><li>盒子高度： offsetHeight</li><li>盒子宽度： offsetWidth</li><li>盒子top:  offsetTop</li><li>盒子left: offsetLeft</li></ul><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">相同类型的事件处理方法，就会被调用，表现为，点击子级，而触发</span><br><span class="line">父级的点击事件</span><br></pre></td></tr></tbody></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span> <span class="attr">onclick</span>=<span class="string">"fn1()"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span> <span class="attr">onclick</span>=<span class="string">"fn(event)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">e</span>)</span>{</span></span><br><span class="line"><span class="javascript">         <span class="comment">//  阻止事件冒泡</span></span></span><br><span class="line"><span class="javascript">          e.stopPropagation();</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="清空所有定时器（原理）"><a href="#清空所有定时器（原理）" class="headerlink" title="清空所有定时器（原理）"></a>清空所有定时器（原理）</h4><h4 id="边界监测"><a href="#边界监测" class="headerlink" title="边界监测"></a>边界监测</h4><ul><li>上限条件： top &lt;= 0</li><li>下限条件： top &gt;=  草皮top - 小鸟height</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> FlappyBird </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlappyBird开发笔记01</title>
      <link href="/2021/07/06/FlappyBird%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B001/"/>
      <url>/2021/07/06/FlappyBird%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B001/</url>
      
        <content type="html"><![CDATA[<h4 id="项目目录搭建"><a href="#项目目录搭建" class="headerlink" title="项目目录搭建"></a>项目目录搭建</h4><ul><li>自定义目录搭建（随便创建）<br>   优点，前期开发没有学习成本<br>   缺点，不利于团队协作开发<br>   应用场景：原生开发（20%）</li><li>工具限定的（前端框架、java、android、IOS）<br>   框架开发 （80%）<pre><code>  + 本地化resource 资源（图片，音频，视频）</code></pre>   学习成本比较高<span id="more"></span><h4 id="游戏，软件逻辑"><a href="#游戏，软件逻辑" class="headerlink" title="游戏，软件逻辑"></a>游戏，软件逻辑</h4></li></ul><ol><li>软件界面的搭建<br>静态(不变的)界面： html css<br>  1、标签数量固定<br>动态变化的元素  ： JS动态创建<br>  1、数量不确定的，动态变化</li><li>和界面元素的交互动作（JS）</li></ol><h4 id="移动端等比例缩放控制"><a href="#移动端等比例缩放控制" class="headerlink" title="移动端等比例缩放控制"></a>移动端等比例缩放控制</h4><ul><li>vw : 当前屏幕宽度的1%，与盒子父级尺寸无关</li><li>vh : 当前屏幕高度的1%，与盒子父级尺寸无关<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>{</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100vw</span>;   <span class="comment">/*占满屏幕宽度*/</span></span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100vh</span>;  <span class="comment">/*占满屏幕高度*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">10vh</span>;  <span class="comment">/*高度方向等比例移动*/</span></span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">10vw</span>; <span class="comment">/*宽度方向等比例移动*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>推荐使用方法</strong></p><ul><li>宽度方向的尺寸，一般只用vw</li><li>高度方向的尺寸，一般用vh</li></ul><h4 id="页面中引入图片的方式"><a href="#页面中引入图片的方式" class="headerlink" title="页面中引入图片的方式"></a>页面中引入图片的方式</h4><ul><li>background-image:背景图 不占用盒子空间。图片上文字，或其他盒子，优先考虑使用背景图</li><li>img：本身就是一个图片标签。尺寸设置可以自适应。常用在图片文字分离场景</li></ul><h4 id="游戏界面的布局"><a href="#游戏界面的布局" class="headerlink" title="游戏界面的布局"></a>游戏界面的布局</h4><ul><li>改变盒子位置的时候，有两种选择<ol><li>margin 位置改变。 联动效果</li><li>定位（绝对定位、固定定位） 互相没有影响<br>推荐使用 定位</li></ol></li></ul><h4 id="绝对定位应用（定位父级）"><a href="#绝对定位应用（定位父级）" class="headerlink" title="绝对定位应用（定位父级）"></a>绝对定位应用（定位父级）</h4><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>{</span><br><span class="line">    <span class="attribute">position</span>:static ; //不可以做定位父级</span><br><span class="line">    <span class="comment">/* 以下皆可 */</span></span><br><span class="line">    <span class="attribute">position</span>:absolute ;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="comment">/* 优先推荐 */</span></span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="relative定位盒子特性"><a href="#relative定位盒子特性" class="headerlink" title="relative定位盒子特性"></a>relative定位盒子特性</h4><p><strong>relative可以同定位来改变盒子位置，同时对原始页面没有任何影响</strong></p><h4 id="定位特性"><a href="#定位特性" class="headerlink" title="定位特性"></a>定位特性</h4><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>{</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="comment">/* 不设置宽度 */</span></span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 将整个盒子拉开 */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>left </li><li>right </li><li>bottom </li><li>top<br>设置的都是盒子的<mark>边</mark>到定位父级<mark>边</mark>之间距离</li></ol><h4 id="盒子间隙特性"><a href="#盒子间隙特性" class="headerlink" title="盒子间隙特性"></a>盒子间隙特性</h4><p><strong>同行排列的盒子，默认的会解析，文档中标签之间的回车键，变成页面中的一个空隙</strong></p><ul><li>消除办法： 给父级设置 $font-size:0$</li></ul><h4 id="CSS动画特性"><a href="#CSS动画特性" class="headerlink" title="CSS动画特性"></a>CSS动画特性</h4><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义动画关键帧 */</span></span><br><span class="line">   <span class="keyword">@keyframes</span> 名称{</span><br><span class="line">       <span class="number">0%</span>{样式：值}</span><br><span class="line">       ...</span><br><span class="line">       <span class="number">100%</span>{样式}</span><br><span class="line">   }</span><br><span class="line">   定义了样式的切换点</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 使用 */</span></span><br><span class="line">   <span class="selector-class">.box</span>{</span><br><span class="line">       <span class="attribute">animation</span>:move <span class="number">2s</span> infinite alternate ease;</span><br><span class="line">        <span class="comment">/* animation:</span></span><br><span class="line"><span class="comment">        动画关键帧名称</span></span><br><span class="line"><span class="comment">        动画时间</span></span><br><span class="line"><span class="comment">        动画播放次数 inifnite 无限次</span></span><br><span class="line"><span class="comment">        动画播放顺序 alternate 交替播放  0%-100%-0%</span></span><br><span class="line"><span class="comment">        动画时间曲线 linear 匀速  ease(默认) */</span></span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><ul><li>完成小鸟背景切换动画</li><li>完成草皮移动动画</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> FlappyBird </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
